install.packages("ggplot2")
library(ggplot2)
search()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
find_rtools()
install.packages("devtools")
find_rtools()
library(devtools)
search()
q()
import("swirl")
swirl()
install.packages("swirl")
library("swirl")
swirl()
sys.date()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){:1}, c(8, 4, 0)
evaluate(function(x){0:1}, c(8, 4, 0)
)
evaluate(function(x){:1}, c(8, 4, 0))
evaluate(function(x){1}, c(8, 4, 0))
evaluate(function(x)[:1], c(8, 4, 0))
evaluate(function(x){[:1]}, c(8, 4, 0))
evaluate(function(x){x[:1]}, c(8, 4, 0))
evaluate(function(x){head(x,1)}, c(8, 4, 0))
evaluate(function(x){tail(x,1)}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("one","two","three")
submit()
mad_libs()
submit()
%p%('I', 'love', 'R!')
"%p%"('I', 'love', 'R!')
"%p%"('I', 'love')
"%%"("%p%"('I', 'love'), 'R!')
"%p%"('I', 'love', 'R!')
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
q<-"October 17, 1986 08:24"
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {#
        x^3#
}
cube(3)
cube(3,4)
cube(3,n=4)
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
x
if(x > 5) {#
        x <- 0#
}
class(x)
unclass(x)
x
if x>5 {}
if x>5 {
if (x>5) {
x<- 0
}
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z <- 10#
f(3)
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
h <- function(x, y = NULL, d = 3L) {#
        z <- cbind(x, d)#
        if(!is.null(y))#
                z <- z + y#
        else#
                z <- z + f#
        g <- x + y / z#
        if(d == 3L)#
                return(g)#
        g <- g + 10#
        g#
}
printmessage<-function(x) {
if(is.na(x))
print("not a number")
else if(x>0)
print("x is greater than 0")
else
print("x is lower than or equal to 0")
}
printmessage(4)
printmessage(-9)
printmessage("frt")
printmessage(frt)
printmessage(na)
printmessage()
printmessage<-function(x) {#
+     if(is.na(x))#
+         print("not a number")#
+     else if(x>0)#
+         print("x is greater than 0")#
+     else#
+         print("x is lower than or equal to 0")#
+     invisible(x)
printmessage<-function(x) {#
+     if(is.na(x))#
+         print("not a number")#
+     else if(x>0)#
+         print("x is greater than 0")#
+     else#
+         print("x is lower than or equal to 0")#
+     invisible(x) }
printmessage<-function(x) {#
+     if(is.na(x))#
+         print("not a number")#
+     else if(x>0)#
+         print("x is greater than 0")#
+     else#
+         print("x is lower than or equal to 0")#
+     invisible(x)
printmessage<-function(x) {#
+     if(is.na(x))#
+         print("not a number")#
+     else if(x>0)#
+         print("x is greater than 0")#
+     else#
+         print("x is lower than or equal to 0")#
+     invisible (x)}
printmessage<-function(x) {#
     if(is.na(x))#
         print("not a number")#
     else if(x>0)#
         print("x is greater than 0")#
     else#
         print("x is lower than or equal to 0")#
     invisible (x)
}
printmessage(9)
x<-log(-1)
printmessage(x)
library("swirl")
swirl()
head(flag)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect<-(flags, class)
cls_vect<-(flags,class)
cls_vect<-saplly(flags,class)
?sapply
cls_vect<-saplly(flags,class,simplify = TRUE,USE.NAMES = TRUE)
cls_vect<-saplly(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
shape(shape_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
laplly(uniq_vals,length)
lapply(uniq_vals,length)
lapply(unique_vals,length)
sapply(unique_vals,length)
saplly(flags,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)#
data(iris)
?iris
head(iris)
mean(iris$Sepal.Width)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
?apply
library(datasets)#
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
debug(ls)
ls
debug(apply)
apply
head(iris)
sapply(iris$Sepal.Width,iris$Species),mean)
sapply(split(iris$Sepal.Width,iris$Species),mean)
sapply(split(iris$Sepal.Length,iris$Species),mean)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
undebug(ls)
undebug(apply)
undebug(sapply)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
source("cachemean.R")
myVector<-makeVector(1:10)
myVector$get()
myVector
myVector$getmean()
myMean<-cachemean(myVector)
myMean
myVector$getmean()
source("cachematrix.R")
myM<-makeCacheMatrix(1:16)
myM
myM$get()
matrix(1:16,4,4)
myM<-makeCacheMatrix(1:16,4,4)
a<-matrix(1:16,4,4)
myM<-makeCacheMatrix(a)
myM$get()
myInv<-cacheSolve(myM)
source("cachematrix.R")
a<-matrix(1:16,4,4)
myM<-makeCacheMatrix(a)
myInv<-cacheSolve(myM)
solve(a)
?solve
solve(a,a)
